type Query {
  receivedFriendRequests: [FriendRequestType]

  sentFriendRequests: [FriendRequestType]

  myFriends: [UserProfileType]

  users: [UserType]

  me: UserType

  allPlans: [PlanType]

  detailedPlan(id: Int!): PlanType

  recommendedOrSearch(searchString: String = null): [PlanType]
}

type FriendRequestType {
  id: ID!

  createdAt: DateTime!

  fromUser: UserProfileType!

  toUser: UserProfileType!

  isAccepted: Boolean!

  requestStatus: FriendshipFriendRequestRequestStatusChoices!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type UserProfileType {
  id: ID!

  publicUsername: String!

  user: UserType!

  birthDate: Date

  biography: String!

  residence: String!

  urlProfilePicture: String!
}

type UserType {
  id: ID!

  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String!

  userProfile: UserProfileType
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
An enumeration.
"""
enum FriendshipFriendRequestRequestStatusChoices {
  """
  PENDING
  """
  PENDING

  """
  ACCEPTED
  """
  ACCEPTED

  """
  REJECTED
  """
  REJECTED
}

type PlanType {
  id: ID!

  owner: UserType!

  title: String!

  description: String!

  location: String!

  initDate: Date!

  initHour: Time!

  endHour: Time!

  isPublic: Boolean

  maxParticipants: Int

  urlPlanPicture: String

  participatingPlan: [PlanParticipationType!]!
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

type PlanParticipationType {
  id: ID!

  participantUser: UserProfileType!

  participatingPlan: PlanType!
}

type Mutation {
  sendFriendRequest(toUsername: String!): SendFriendRequest

  acceptFriendRequest(frId: Int!): AcceptFriendRequest

  rejectFriendRequest(frId: Int!): RejectFriendRequest

  createPlan(description: String!, endHour: Time!, initDate: Date!, initHour: Time!, isPublic: Boolean = null, location: String!, maxParticipants: Int = null, title: String!, urlPlanPicture: String = null): CreatePlan

  deletePlan(id: Int!): DeletePlan

  """
  In the case that it already exists a participation, it will be destroyed
  """
  participateInPlan(planId: Int!): ParticipateInPlan

  createUser(email: String!, password: String!, username: String!): CreateUser

  """
  Obtain JSON Web Token mutation
  """
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken

  verifyToken(token: String = null): Verify

  refreshToken(token: String = null): Refresh
}

type SendFriendRequest {
  friendRequest: FriendRequestType
}

type AcceptFriendRequest {
  friendRequest: FriendRequestType
}

type RejectFriendRequest {
  friendRequest: FriendRequestType
}

type CreatePlan {
  plan: PlanType
}

type DeletePlan {
  ok: Boolean
}

"""
In the case that it already exists a participation, it will be destroyed
"""
type ParticipateInPlan {
  planParticipation: PlanParticipationType
}

type CreateUser {
  user: UserType
}

"""
Obtain JSON Web Token mutation
"""
type ObtainJSONWebToken {
  payload: GenericScalar!

  refreshExpiresIn: Int!

  token: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Verify {
  payload: GenericScalar!
}

type Refresh {
  payload: GenericScalar!

  refreshExpiresIn: Int!

  token: String!
}

schema {
  query: Query
  mutation: Mutation
}
