type Query {
  users: [UserType]

  me: UserType

  allPlans: [PlanType]
}

type UserType {
  id: ID!

  password: String!

  lastLogin: DateTime

  """
  Designates that this user has all permissions without explicitly assigning them.
  """
  isSuperuser: Boolean!

  """
  Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  """
  username: String!

  firstName: String!

  lastName: String!

  email: String!

  """
  Designates whether the user can log into this admin site.
  """
  isStaff: Boolean!

  """
  Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  """
  isActive: Boolean!

  dateJoined: DateTime!
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type PlanType {
  id: ID!

  title: String!

  description: String!

  location: String!

  initDate: Date!

  initHour: Time!

  endHour: Time!

  isPublic: Boolean!
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

type Mutation {
  createUser(email: String!, password: String!, username: String!): CreateUser

  """
  Obtain JSON Web Token mutation
  """
  tokenAuth(username: String!, password: String!): ObtainJSONWebToken

  verifyToken(token: String = null): Verify

  refreshToken(token: String = null): Refresh
}

type CreateUser {
  user: UserType
}

"""
Obtain JSON Web Token mutation
"""
type ObtainJSONWebToken {
  payload: GenericScalar!

  refreshExpiresIn: Int!

  token: String!
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type Verify {
  payload: GenericScalar!
}

type Refresh {
  payload: GenericScalar!

  refreshExpiresIn: Int!

  token: String!
}

schema {
  query: Query
  mutation: Mutation
}
